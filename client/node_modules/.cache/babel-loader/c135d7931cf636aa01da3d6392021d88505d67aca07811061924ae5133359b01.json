{"ast":null,"code":"var _jsxFileName = \"/Users/rajattiwari/aiorhuman/client/src/contexts/GameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext(undefined);\nexport const GameProvider = ({\n  children\n}) => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [isOpponentTyping, setIsOpponentTyping] = useState(false);\n  let typingTimeout;\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const newSocket = io('http://localhost:5000', {\n        auth: {\n          token\n        }\n      });\n      newSocket.on('connect', () => {\n        setIsConnected(true);\n        console.log('Connected to server');\n      });\n      newSocket.on('disconnect', () => {\n        setIsConnected(false);\n        console.log('Disconnected from server');\n      });\n      newSocket.on('message', message => {\n        setMessages(prev => [...prev, message]);\n      });\n      newSocket.on('game-started', () => {\n        setIsPlaying(true);\n        setMessages([]);\n      });\n      newSocket.on('game-ended', result => {\n        console.log('Game ended:', result);\n        setIsPlaying(false);\n      });\n      newSocket.on('opponent-typing', () => {\n        setIsOpponentTyping(true);\n        if (typingTimeout) clearTimeout(typingTimeout);\n        typingTimeout = setTimeout(() => setIsOpponentTyping(false), 3000);\n      });\n      setSocket(newSocket);\n      return () => {\n        if (typingTimeout) clearTimeout(typingTimeout);\n        newSocket.close();\n      };\n    }\n  }, []);\n  const startGame = () => {\n    if (socket) {\n      socket.emit('join-queue');\n    }\n  };\n  const endGame = () => {\n    setIsPlaying(false);\n    setMessages([]);\n    setIsOpponentTyping(false);\n  };\n  const sendMessage = content => {\n    if (socket) {\n      socket.emit('send-message', content);\n    }\n  };\n  const makeGuess = guess => {\n    if (socket) {\n      socket.emit('make-guess', guess);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      isPlaying,\n      messages,\n      isConnected,\n      isOpponentTyping,\n      startGame,\n      endGame,\n      sendMessage,\n      makeGuess\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(GameProvider, \"/7ff5vMgPdYW+28hXt92/llj7E0=\");\n_c = GameProvider;\nexport const useGame = () => {\n  _s2();\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n_s2(useGame, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","io","jsxDEV","_jsxDEV","GameContext","undefined","GameProvider","children","_s","socket","setSocket","isPlaying","setIsPlaying","isConnected","setIsConnected","messages","setMessages","isOpponentTyping","setIsOpponentTyping","typingTimeout","token","localStorage","getItem","newSocket","auth","on","console","log","message","prev","result","clearTimeout","setTimeout","close","startGame","emit","endGame","sendMessage","content","makeGuess","guess","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGame","_s2","context","Error","$RefreshReg$"],"sources":["/Users/rajattiwari/aiorhuman/client/src/contexts/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { io, Socket } from 'socket.io-client';\n\ninterface Message {\n  id: string;\n  content: string;\n  senderId: string;\n  timestamp: Date;\n}\n\ninterface GameContextType {\n  isPlaying: boolean;\n  messages: Message[];\n  isConnected: boolean;\n  isOpponentTyping: boolean;\n  startGame: () => void;\n  endGame: () => void;\n  sendMessage: (content: string) => void;\n  makeGuess: (guess: 'human' | 'ai') => void;\n}\n\nconst GameContext = createContext<GameContextType | undefined>(undefined);\n\nexport const GameProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [isOpponentTyping, setIsOpponentTyping] = useState(false);\n  let typingTimeout: NodeJS.Timeout;\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const newSocket = io('http://localhost:5000', {\n        auth: { token }\n      });\n\n      newSocket.on('connect', () => {\n        setIsConnected(true);\n        console.log('Connected to server');\n      });\n\n      newSocket.on('disconnect', () => {\n        setIsConnected(false);\n        console.log('Disconnected from server');\n      });\n\n      newSocket.on('message', (message: Message) => {\n        setMessages(prev => [...prev, message]);\n      });\n\n      newSocket.on('game-started', () => {\n        setIsPlaying(true);\n        setMessages([]);\n      });\n\n      newSocket.on('game-ended', (result) => {\n        console.log('Game ended:', result);\n        setIsPlaying(false);\n      });\n\n      newSocket.on('opponent-typing', () => {\n        setIsOpponentTyping(true);\n        if (typingTimeout) clearTimeout(typingTimeout);\n        typingTimeout = setTimeout(() => setIsOpponentTyping(false), 3000);\n      });\n\n      setSocket(newSocket);\n\n      return () => {\n        if (typingTimeout) clearTimeout(typingTimeout);\n        newSocket.close();\n      };\n    }\n  }, []);\n\n  const startGame = () => {\n    if (socket) {\n      socket.emit('join-queue');\n    }\n  };\n\n  const endGame = () => {\n    setIsPlaying(false);\n    setMessages([]);\n    setIsOpponentTyping(false);\n  };\n\n  const sendMessage = (content: string) => {\n    if (socket) {\n      socket.emit('send-message', content);\n    }\n  };\n\n  const makeGuess = (guess: 'human' | 'ai') => {\n    if (socket) {\n      socket.emit('make-guess', guess);\n    }\n  };\n\n  return (\n    <GameContext.Provider value={{ \n      isPlaying, \n      messages, \n      isConnected,\n      isOpponentTyping,\n      startGame, \n      endGame, \n      sendMessage, \n      makeGuess \n    }}>\n      {children}\n    </GameContext.Provider>\n  );\n};\n\nexport const useGame = () => {\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}