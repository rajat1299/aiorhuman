{"ast":null,"code":"var _jsxFileName = \"/Users/rajattiwari/aiorhuman/client/src/contexts/GameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext(undefined);\nexport const GameProvider = ({\n  children\n}) => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [isOpponentTyping, setIsOpponentTyping] = useState(false);\n  const typingTimeoutRef = useRef();\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n  const initializeSocket = () => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    console.log('Initializing socket connection...');\n    const newSocket = io(process.env.REACT_APP_API_URL || 'http://localhost:5001', {\n      auth: {\n        token\n      },\n      reconnection: true,\n      reconnectionAttempts: maxReconnectAttempts,\n      reconnectionDelay: 1000,\n      timeout: 10000\n    });\n    newSocket.on('connect', () => {\n      console.log('Connected to game server');\n      setIsConnected(true);\n      reconnectAttempts.current = 0;\n    });\n    newSocket.on('connect_error', error => {\n      console.error('Connection error:', error);\n      reconnectAttempts.current++;\n      if (reconnectAttempts.current >= maxReconnectAttempts) {\n        console.error('Max reconnection attempts reached');\n        newSocket.close();\n      }\n    });\n    newSocket.on('disconnect', reason => {\n      console.log('Disconnected from game server:', reason);\n      setIsConnected(false);\n    });\n    newSocket.on('queue-joined', () => {\n      console.log('Successfully joined queue');\n    });\n    newSocket.on('game-started', data => {\n      console.log('Game started:', data);\n      setIsPlaying(true);\n      setMessages([]);\n    });\n    newSocket.on('message', message => {\n      console.log('Received message:', message);\n      setMessages(prev => [...prev, message]);\n    });\n    newSocket.on('opponent-typing', () => {\n      setIsOpponentTyping(true);\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n      typingTimeoutRef.current = setTimeout(() => setIsOpponentTyping(false), 3000);\n    });\n    newSocket.on('game-ended', result => {\n      console.log('Game ended:', result);\n      setIsPlaying(false);\n    });\n    setSocket(newSocket);\n    return () => {\n      console.log('Cleaning up socket connection...');\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n      newSocket.close();\n    };\n  };\n  useEffect(() => {\n    const cleanup = initializeSocket();\n    return () => {\n      cleanup === null || cleanup === void 0 ? void 0 : cleanup();\n    };\n  }, []);\n  const startGame = () => {\n    if (!socket) {\n      console.error('Socket not connected');\n      return;\n    }\n    if (isPlaying) {\n      console.log('Already in a game');\n      return;\n    }\n    console.log('Emitting join-queue event');\n    socket.emit('join-queue');\n  };\n  const endGame = () => {\n    if (isPlaying) {\n      setIsPlaying(false);\n      setMessages([]);\n      setIsOpponentTyping(false);\n    }\n  };\n  const sendMessage = content => {\n    if (socket && isPlaying) {\n      console.log('Sending message:', content);\n      socket.emit('send-message', content);\n    }\n  };\n  const makeGuess = guess => {\n    if (socket && isPlaying) {\n      console.log('Making guess:', guess);\n      socket.emit('make-guess', guess);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      isPlaying,\n      messages,\n      isConnected,\n      isOpponentTyping,\n      startGame,\n      endGame,\n      sendMessage,\n      makeGuess\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(GameProvider, \"ANWDVVCTwtguD1euidxjoJcupfY=\");\n_c = GameProvider;\nexport const useGame = () => {\n  _s2();\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n_s2(useGame, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","io","jsxDEV","_jsxDEV","GameContext","undefined","GameProvider","children","_s","socket","setSocket","isPlaying","setIsPlaying","isConnected","setIsConnected","messages","setMessages","isOpponentTyping","setIsOpponentTyping","typingTimeoutRef","reconnectAttempts","maxReconnectAttempts","initializeSocket","token","localStorage","getItem","console","log","newSocket","process","env","REACT_APP_API_URL","auth","reconnection","reconnectionAttempts","reconnectionDelay","timeout","on","current","error","close","reason","data","message","prev","clearTimeout","setTimeout","result","cleanup","startGame","emit","endGame","sendMessage","content","makeGuess","guess","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGame","_s2","context","Error","$RefreshReg$"],"sources":["/Users/rajattiwari/aiorhuman/client/src/contexts/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { io, Socket } from 'socket.io-client';\n\ninterface Message {\n  id: string;\n  content: string;\n  senderId: string;\n  timestamp: Date;\n}\n\ninterface GameContextType {\n  isPlaying: boolean;\n  messages: Message[];\n  isConnected: boolean;\n  isOpponentTyping: boolean;\n  startGame: () => void;\n  endGame: () => void;\n  sendMessage: (content: string) => void;\n  makeGuess: (guess: 'human' | 'ai') => void;\n}\n\nconst GameContext = createContext<GameContextType | undefined>(undefined);\n\nexport const GameProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [isOpponentTyping, setIsOpponentTyping] = useState(false);\n  const typingTimeoutRef = useRef<NodeJS.Timeout>();\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  const initializeSocket = () => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n\n    console.log('Initializing socket connection...');\n    const newSocket = io(process.env.REACT_APP_API_URL || 'http://localhost:5001', {\n      auth: { token },\n      reconnection: true,\n      reconnectionAttempts: maxReconnectAttempts,\n      reconnectionDelay: 1000,\n      timeout: 10000\n    });\n\n    newSocket.on('connect', () => {\n      console.log('Connected to game server');\n      setIsConnected(true);\n      reconnectAttempts.current = 0;\n    });\n\n    newSocket.on('connect_error', (error) => {\n      console.error('Connection error:', error);\n      reconnectAttempts.current++;\n      if (reconnectAttempts.current >= maxReconnectAttempts) {\n        console.error('Max reconnection attempts reached');\n        newSocket.close();\n      }\n    });\n\n    newSocket.on('disconnect', (reason) => {\n      console.log('Disconnected from game server:', reason);\n      setIsConnected(false);\n    });\n\n    newSocket.on('queue-joined', () => {\n      console.log('Successfully joined queue');\n    });\n\n    newSocket.on('game-started', (data) => {\n      console.log('Game started:', data);\n      setIsPlaying(true);\n      setMessages([]);\n    });\n\n    newSocket.on('message', (message: Message) => {\n      console.log('Received message:', message);\n      setMessages(prev => [...prev, message]);\n    });\n\n    newSocket.on('opponent-typing', () => {\n      setIsOpponentTyping(true);\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n      typingTimeoutRef.current = setTimeout(() => setIsOpponentTyping(false), 3000);\n    });\n\n    newSocket.on('game-ended', (result) => {\n      console.log('Game ended:', result);\n      setIsPlaying(false);\n    });\n\n    setSocket(newSocket);\n\n    return () => {\n      console.log('Cleaning up socket connection...');\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n      newSocket.close();\n    };\n  };\n\n  useEffect(() => {\n    const cleanup = initializeSocket();\n    return () => {\n      cleanup?.();\n    };\n  }, []);\n\n  const startGame = () => {\n    if (!socket) {\n      console.error('Socket not connected');\n      return;\n    }\n    if (isPlaying) {\n      console.log('Already in a game');\n      return;\n    }\n    \n    console.log('Emitting join-queue event');\n    socket.emit('join-queue');\n  };\n\n  const endGame = () => {\n    if (isPlaying) {\n      setIsPlaying(false);\n      setMessages([]);\n      setIsOpponentTyping(false);\n    }\n  };\n\n  const sendMessage = (content: string) => {\n    if (socket && isPlaying) {\n      console.log('Sending message:', content);\n      socket.emit('send-message', content);\n    }\n  };\n\n  const makeGuess = (guess: 'human' | 'ai') => {\n    if (socket && isPlaying) {\n      console.log('Making guess:', guess);\n      socket.emit('make-guess', guess);\n    }\n  };\n\n  return (\n    <GameContext.Provider value={{ \n      isPlaying, \n      messages, \n      isConnected,\n      isOpponentTyping,\n      startGame, \n      endGame, \n      sendMessage, \n      makeGuess \n    }}>\n      {children}\n    </GameContext.Provider>\n  );\n};\n\nexport const useGame = () => {\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACrF,SAASC,EAAE,QAAgB,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAoB9C,MAAMC,WAAW,gBAAGR,aAAa,CAA8BS,SAAS,CAAC;AAEzE,OAAO,MAAMC,YAAqD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAgB,IAAI,CAAC;EACzD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAY,EAAE,CAAC;EACvD,MAAM,CAACmB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAMqB,gBAAgB,GAAGnB,MAAM,CAAiB,CAAC;EACjD,MAAMoB,iBAAiB,GAAGpB,MAAM,CAAC,CAAC,CAAC;EACnC,MAAMqB,oBAAoB,GAAG,CAAC;EAE9B,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;IAEZG,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAChD,MAAMC,SAAS,GAAG3B,EAAE,CAAC4B,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB,EAAE;MAC7EC,IAAI,EAAE;QAAET;MAAM,CAAC;MACfU,YAAY,EAAE,IAAI;MAClBC,oBAAoB,EAAEb,oBAAoB;MAC1Cc,iBAAiB,EAAE,IAAI;MACvBC,OAAO,EAAE;IACX,CAAC,CAAC;IAEFR,SAAS,CAACS,EAAE,CAAC,SAAS,EAAE,MAAM;MAC5BX,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvCb,cAAc,CAAC,IAAI,CAAC;MACpBM,iBAAiB,CAACkB,OAAO,GAAG,CAAC;IAC/B,CAAC,CAAC;IAEFV,SAAS,CAACS,EAAE,CAAC,eAAe,EAAGE,KAAK,IAAK;MACvCb,OAAO,CAACa,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzCnB,iBAAiB,CAACkB,OAAO,EAAE;MAC3B,IAAIlB,iBAAiB,CAACkB,OAAO,IAAIjB,oBAAoB,EAAE;QACrDK,OAAO,CAACa,KAAK,CAAC,mCAAmC,CAAC;QAClDX,SAAS,CAACY,KAAK,CAAC,CAAC;MACnB;IACF,CAAC,CAAC;IAEFZ,SAAS,CAACS,EAAE,CAAC,YAAY,EAAGI,MAAM,IAAK;MACrCf,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEc,MAAM,CAAC;MACrD3B,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC;IAEFc,SAAS,CAACS,EAAE,CAAC,cAAc,EAAE,MAAM;MACjCX,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IAC1C,CAAC,CAAC;IAEFC,SAAS,CAACS,EAAE,CAAC,cAAc,EAAGK,IAAI,IAAK;MACrChB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEe,IAAI,CAAC;MAClC9B,YAAY,CAAC,IAAI,CAAC;MAClBI,WAAW,CAAC,EAAE,CAAC;IACjB,CAAC,CAAC;IAEFY,SAAS,CAACS,EAAE,CAAC,SAAS,EAAGM,OAAgB,IAAK;MAC5CjB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEgB,OAAO,CAAC;MACzC3B,WAAW,CAAC4B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,OAAO,CAAC,CAAC;IACzC,CAAC,CAAC;IAEFf,SAAS,CAACS,EAAE,CAAC,iBAAiB,EAAE,MAAM;MACpCnB,mBAAmB,CAAC,IAAI,CAAC;MACzB,IAAIC,gBAAgB,CAACmB,OAAO,EAAE;QAC5BO,YAAY,CAAC1B,gBAAgB,CAACmB,OAAO,CAAC;MACxC;MACAnB,gBAAgB,CAACmB,OAAO,GAAGQ,UAAU,CAAC,MAAM5B,mBAAmB,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;IAC/E,CAAC,CAAC;IAEFU,SAAS,CAACS,EAAE,CAAC,YAAY,EAAGU,MAAM,IAAK;MACrCrB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEoB,MAAM,CAAC;MAClCnC,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;IAEFF,SAAS,CAACkB,SAAS,CAAC;IAEpB,OAAO,MAAM;MACXF,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/C,IAAIR,gBAAgB,CAACmB,OAAO,EAAE;QAC5BO,YAAY,CAAC1B,gBAAgB,CAACmB,OAAO,CAAC;MACxC;MACAV,SAAS,CAACY,KAAK,CAAC,CAAC;IACnB,CAAC;EACH,CAAC;EAEDzC,SAAS,CAAC,MAAM;IACd,MAAMiD,OAAO,GAAG1B,gBAAgB,CAAC,CAAC;IAClC,OAAO,MAAM;MACX0B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAG,CAAC;IACb,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAI,CAACxC,MAAM,EAAE;MACXiB,OAAO,CAACa,KAAK,CAAC,sBAAsB,CAAC;MACrC;IACF;IACA,IAAI5B,SAAS,EAAE;MACbe,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChC;IACF;IAEAD,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IACxClB,MAAM,CAACyC,IAAI,CAAC,YAAY,CAAC;EAC3B,CAAC;EAED,MAAMC,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAIxC,SAAS,EAAE;MACbC,YAAY,CAAC,KAAK,CAAC;MACnBI,WAAW,CAAC,EAAE,CAAC;MACfE,mBAAmB,CAAC,KAAK,CAAC;IAC5B;EACF,CAAC;EAED,MAAMkC,WAAW,GAAIC,OAAe,IAAK;IACvC,IAAI5C,MAAM,IAAIE,SAAS,EAAE;MACvBe,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE0B,OAAO,CAAC;MACxC5C,MAAM,CAACyC,IAAI,CAAC,cAAc,EAAEG,OAAO,CAAC;IACtC;EACF,CAAC;EAED,MAAMC,SAAS,GAAIC,KAAqB,IAAK;IAC3C,IAAI9C,MAAM,IAAIE,SAAS,EAAE;MACvBe,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE4B,KAAK,CAAC;MACnC9C,MAAM,CAACyC,IAAI,CAAC,YAAY,EAAEK,KAAK,CAAC;IAClC;EACF,CAAC;EAED,oBACEpD,OAAA,CAACC,WAAW,CAACoD,QAAQ;IAACC,KAAK,EAAE;MAC3B9C,SAAS;MACTI,QAAQ;MACRF,WAAW;MACXI,gBAAgB;MAChBgC,SAAS;MACTE,OAAO;MACPC,WAAW;MACXE;IACF,CAAE;IAAA/C,QAAA,EACCA;EAAQ;IAAAmD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACrD,EAAA,CA3IWF,YAAqD;AAAAwD,EAAA,GAArDxD,YAAqD;AA6IlE,OAAO,MAAMyD,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGpE,UAAU,CAACO,WAAW,CAAC;EACvC,IAAI6D,OAAO,KAAK5D,SAAS,EAAE;IACzB,MAAM,IAAI6D,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}