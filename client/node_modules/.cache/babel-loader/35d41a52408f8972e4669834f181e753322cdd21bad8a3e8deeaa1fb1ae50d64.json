{"ast":null,"code":"var _jsxFileName = \"/Users/rajattiwari/aiorhuman/client/src/contexts/SocketContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(undefined);\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    token\n  } = useAuth();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  useEffect(() => {\n    if (isAuthenticated && token) {\n      const newSocket = io('http://localhost:3000', {\n        auth: {\n          token\n        },\n        transports: ['websocket'],\n        reconnection: true,\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000,\n        timeout: 10000\n      });\n      newSocket.on('connect', () => {\n        console.log('Socket connected with ID:', newSocket.id);\n        setIsConnected(true);\n      });\n      newSocket.on('disconnect', () => {\n        console.log('Socket disconnected');\n        setIsConnected(false);\n      });\n      newSocket.on('connect_error', error => {\n        console.error('Socket connection error:', error);\n        setIsConnected(false);\n      });\n      newSocket.connect();\n      setSocket(newSocket);\n      return () => {\n        newSocket.disconnect();\n        setSocket(null);\n        setIsConnected(false);\n      };\n    }\n  }, [isAuthenticated, token]);\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      socket,\n      isConnected\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(SocketProvider, \"qkVJ4K7YXze2DMgklGsE6iGz/9s=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (context === undefined) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context.socket;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const useSocketConnection = () => {\n  _s3();\n  const context = useContext(SocketContext);\n  if (context === undefined) {\n    throw new Error('useSocketConnection must be used within a SocketProvider');\n  }\n  return context.isConnected;\n};\n_s3(useSocketConnection, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","useAuth","jsxDEV","_jsxDEV","SocketContext","undefined","SocketProvider","children","_s","isAuthenticated","token","socket","setSocket","isConnected","setIsConnected","newSocket","auth","transports","reconnection","reconnectionAttempts","reconnectionDelay","timeout","on","console","log","id","error","connect","disconnect","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","useSocketConnection","_s3","$RefreshReg$"],"sources":["/Users/rajattiwari/aiorhuman/client/src/contexts/SocketContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io, Socket } from 'socket.io-client';\nimport { useAuth } from './AuthContext';\n\ninterface SocketContextType {\n  socket: Socket | null;\n  isConnected: boolean;\n}\n\nconst SocketContext = createContext<SocketContextType | undefined>(undefined);\n\nexport const SocketProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { isAuthenticated, token } = useAuth();\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n\n  useEffect(() => {\n    if (isAuthenticated && token) {\n      const newSocket = io('http://localhost:3000', {\n        auth: { token },\n        transports: ['websocket'],\n        reconnection: true,\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000,\n        timeout: 10000\n      });\n\n      newSocket.on('connect', () => {\n        console.log('Socket connected with ID:', newSocket.id);\n        setIsConnected(true);\n      });\n\n      newSocket.on('disconnect', () => {\n        console.log('Socket disconnected');\n        setIsConnected(false);\n      });\n\n      newSocket.on('connect_error', (error) => {\n        console.error('Socket connection error:', error);\n        setIsConnected(false);\n      });\n\n      newSocket.connect();\n      setSocket(newSocket);\n\n      return () => {\n        newSocket.disconnect();\n        setSocket(null);\n        setIsConnected(false);\n      };\n    }\n  }, [isAuthenticated, token]);\n\n  return (\n    <SocketContext.Provider value={{ socket, isConnected }}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (context === undefined) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context.socket;\n};\n\nexport const useSocketConnection = () => {\n  const context = useContext(SocketContext);\n  if (context === undefined) {\n    throw new Error('useSocketConnection must be used within a SocketProvider');\n  }\n  return context.isConnected;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}